#! /usr/bin/env python
#This code will plot user-selected isotherm data, and can also plot literature data.
#This code will create a constant temperature isotherm plot. It should be executed in the directory containing all of the loading directories for a specified condition, i.e. temperature.
import readline
import numpy as np
import math
import matplotlib.pyplot as plt
from re import sub
import time
import subprocess

readline.parse_and_bind("tab: complete")
readline.set_completer_delims(readline.get_completer_delims().replace('-',''))

#define tick mark font size
plt.rc('xtick', labelsize=20)
plt.rc('ytick', labelsize=20)

#identify the directories and get the pressure data
Dirs = subprocess.Popen(r'ls -d */', stdout=subprocess.PIPE, shell=True)
Pressures = Dirs.communicate()[0].replace("mbar/\n"," ").split()
pressures1 = np.sort(np.array([float(i) for i in Pressures]))

loading = []
for pressure in pressures1:
    loc = '{0}mbar/Output/System_0/'.format(str(pressure))
    getData = subprocess.Popen(r'grep -F "Average loading excess [cm^3 (STP)/g" output_*', stdout=subprocess.PIPE, cwd=loc, shell=True)
    loading.append(float(getData.communicate()[0].split()[6]))
loading1 = np.array(loading)

#get the simulation data label from the current directory name
labelDir = subprocess.Popen(r'printf "%s" "${PWD##*/}"', stdout=subprocess.PIPE, shell=True)
dataLabel = labelDir.communicate()[0]

#determine if a literature data set needs to be plotted
controller = 0
while (controller != 1):
    inputRequiredController = raw_input('\n\nDo data sets from the literature need to be plotted? (y/n)\n')
    if (inputRequiredController == 'n'):
        controller = 1
    elif (inputRequiredController == 'y'):
        controller = 1
        #now display the data file names in th literatureData directory for the user
        litData = subprocess.Popen(r'ls /ihome/kjohnson/jpr54/raspa/isotherms/literatureData/', stdout=subprocess.PIPE, shell=True)
        litDataLines = litData.communicate()[0].split()
        print('\nData for the following calculations are available:\n')
        for i, line in enumerate(litDataLines):
            print('{0}: {1}'.format(i,line))

        #now determine which data sets the user would like to include
        print('\nEnter the numbers corresponding to the calculations you would like to plot, separated by spaces.\n')
        litNumbers = raw_input('For example: 0 1\n')
        litNumList = np.unique(np.array([int(s) for s in litNumbers.split() if s.isdigit()]))

    else:
        time.sleep(2)
        print('\n\n\nInvalid entry, please try again.\n')
        time.sleep(1)

dataSetLabels = np.array([])
#define the figure size
plt.figure(figsize=(16,9))

#bring in the desired literature data
if inputRequiredController == 'y':
    for dCount, P in enumerate(litNumList):
        tempPressArray = np.array([])
        tempLoadingArray = np.array([])
        dataSetLabels = np.append(dataSetLabels, litDataLines[int(P)])
        fileName = '/ihome/kjohnson/jpr54/raspa/isotherms/literatureData/' + litDataLines[int(P)]

    #read in the data
    tempFile = open(fileName, 'r')
    tempLines = tempFile.readlines()
    tempFile.close()

    #save the first line in the label, plot the literature data
    dataSetLabels = np.append(dataSetLabels, tempLines[0][:-1])
    for jCount, line in enumerate(tempLines):
        if (jCount > 0):
            tempPressArray = np.append(tempPressArray, line.split()[0])
            tempLoadingArray = np.append(tempLoadingArray, line.split()[1])
            legendSelection = 0
            # while (legendSelection != 1):
            #print('What information do you need to include in the legend? Calculation/literature is added automatically.\n')
            # legendSelection = int(raw_input('1: MOF name only\n2: MOF name and adsorbate\n3:MOF name, adsorbate, and temperature\n4: MOF name and temperature\n5: Adsorbate and temperature\n6: No additional information.'))
            # plt.plot(tempPressArray, tempLoadingArray, label=dataSetLabels[dCount].rsplit('_',2)[0].replace('_',' ')+' Literature', marker='o', markersize=10, linestyle='none')
    plt.plot(tempPressArray, tempLoadingArray, label='Literature', marker='o', markersize=14, linestyle='none')

    
#determine upper axis limits
xMax = int(math.ceil(float(max(pressures1))))
yMax = int(math.ceil(float(max(loading1))))

#get plot title
pT = subprocess.Popen('pwd', stdout=subprocess.PIPE)
plotTitle = str(str(pT.communicate()[0].split()[0])).rsplit('/',1)[1]

#finally, we have two numpy arrays that contain the data we need. Make the plot and save it
#plt.plot(pressures1,loading1,label=dataLabel.rsplit('_',3)[0].replace('_',' ')+' Calculated', linewidth=2.0)
plt.plot(pressures1,loading1,label='Calculated', linewidth=3.0, marker='*', markersize=14)
plt.ylabel('Loading (cc/g STP)', fontsize=24)
plt.xlabel('Pressure (mbar)', fontsize=24)
#only print legend if literature data is included
if inputRequiredController == 'y':
    plt.legend(loc=7,prop={'size':24})
plt.axis((0,xMax,0,yMax*1.2))

#write the plot to a file if desired
pControl = 0
while pControl != 1:
    savePlot = raw_input('save the plot? y/n\n')
    if (savePlot == 'y'):
        plt.savefig(plotTitle)
        pControl = 1
    elif (savePlot == 'n'):
        print('owl\n')
        pControl = 1
    else:
        print('try again\n')

plt.show()
